name: build
on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set deterministic env
        run: |
          echo "SOURCE_DATE_EPOCH=1734825600" >> $GITHUB_ENV
          echo "LC_ALL=C" >> $GITHUB_ENV

      - name: Toolchain
        run: |
          set -euxo pipefail
          sudo apt-get update
          # toolchain + iso bits
          sudo apt-get install -y build-essential binutils xorriso mtools dosfstools uuid-dev
          # gnu-efi varies by release
          sudo apt-get install -y gnu-efi || true
          # qemu + firmware + qemu-img
          sudo apt-get install -y qemu-system-x86 ovmf qemu-utils

      - name: Build
        run: make
      - name: Build ISO
        run: make iso
      - name: Size gate (kernel ≤ 512 KiB)
        run: ./scripts/size_gate.sh kernel.bin 524288
      - name: ISO size gate (≤ 32 MiB, conditional)
        run: |
          if [ -f iso/sovrn.iso ]; then
            ./scripts/size_gate.sh iso/sovrn.iso 33554432
          else
            echo "No ISO yet — skipping"
          fi

      # ----- UEFI smoke that ALWAYS writes/exports a log -----
      - name: UEFI smoke (serial)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p out
          : > out/qemu-uefi-serial.log   # make sure a file exists no matter what
          ISO="iso/sovrn.iso"
          echo "[dbg] ls -l $ISO" | tee -a out/qemu-uefi-serial.log
          ls -l "$ISO" | tee -a out/qemu-uefi-serial.log || true

          # Pick OVMF CODE on Ubuntu
          CODE="/usr/share/OVMF/OVMF_CODE.fd"
          if [[ ! -f "$CODE" ]]; then
            CODE=$(ls /usr/share/OVMF/OVMF_CODE*.fd 2>/dev/null | head -1)
          fi
          echo "[dbg] OVMF CODE: $CODE" | tee -a out/qemu-uefi-serial.log
          if [[ ! -f "$CODE" ]]; then
            echo "ERROR: OVMF CODE not found" | tee -a out/qemu-uefi-serial.log
          fi

          # Fresh VARS flash (fallback to dd if qemu-img missing)
          VARS="$(mktemp)"   # extension not required
          if command -v qemu-img >/dev/null 2>&1; then
            qemu-img create -f raw "$VARS" 4M
          else
            dd if=/dev/zero of="$VARS" bs=1M count=4
          fi

          # Run QEMU under timeout; do NOT let failure kill the step yet
          set +e
          timeout 25s qemu-system-x86_64 \
            -machine q35 -m 256 -serial stdio -display none -no-reboot \
            -drive if=pflash,format=raw,readonly=on,file="$CODE" \
            -drive if=pflash,format=raw,file="$VARS" \
            -boot order=d,menu=off \
            -cdrom "$ISO" \
            | tee -a out/qemu-uefi-serial.log
          rc=$?
          set -e

          # Record pass/fail to a file; job assertion happens later
          if grep -q "SOVRN ENGINE ONLINE" out/qemu-uefi-serial.log; then
            echo PASS > out/smoke_result.txt
          else
            echo FAIL > out/smoke_result.txt
            echo "[dbg] smoke rc=$rc" >> out/qemu-uefi-serial.log
          fi

      - name: Upload serial log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: uefi-smoke
          path: |
            out/qemu-uefi-serial.log
            out/smoke_result.txt
          if-no-files-found: error

      - name: Assert smoke passed
        if: always()
        run: |
          test -f out/smoke_result.txt
          grep -q PASS out/smoke_result.txt

      # (optional) keep your EFI verify + SHA256 + artifacts here as before
